#!/bin/bash

# Make sure that necessary executables are installed
for b in jq aws
do
    command -v $b >/dev/null 2>&1 || { echo >&2 "I require $b but it's not installed.  Aborting."; exit 1; }
done

# Set allexport mode, all variables defined in this block will get exported
set -a
# Name of the stack being created
: ${HLS_STACKNAME:=hls}

# Required env settings
# LAADS DAAC Token
HLS_LAADS_TOKEN="<your token>"

# Bucket used for processing output
HLS_OUTPUT_BUCKET=hls-global
HLS_OUTPUT_BUCKET_HISTORIC=hls-gobal-historic


# Role for copying to output bucket
HLS_OUTPUT_BUCKET_ROLE_ARN=arn:aws:iam::611670965994:role/gcc-S3Test

# Landsat SNS topic
HLS_LANDSAT_SNS_TOPIC=arn:aws:sns:us-west-2:673253540267:public-c2-notify

# Bucket for merged GIBS tile output.
HLS_GIBS_OUTPUT_BUCKET=hls-browse-imagery
HLS_GIBS_OUTPUT_BUCKET_HISTORIC=hls-browse-imagery-historic


# Optional env settings
# Image for Sentinel processing
HLS_SENTINEL_ECR_URI="018923174646.dkr.ecr.us-west-2.amazonaws.com/hls-sentinel:latest"

# Image for Landsat AC processing
HLS_LANDSAT_ECR_URI="018923174646.dkr.ecr.us-west-2.amazonaws.com/hls-landsat-c2:latest"

# Image for Landsat tile processing
HLS_LANDSAT_TILE_ECR_URI="018923174646.dkr.ecr.us-west-2.amazonaws.com/hls-landsat-c2:latest"

# Image for LAADS processing
HLS_LAADS_ECR_URI="018923174646.dkr.ecr.us-west-2.amazonaws.com/hls-laads:latest"

# Schedule for updating Laads data
HLS_LAADS_CRON="cron(0 0/12 * * ? *)"

# Schedule to process incomplete Landsat tiles
HLS_LANDSAT_INCOMPLETE_CRON="cron(0 12 * * ? *)"

# Schedule to reprocess Setinel errors.
HLS_SENTINEL_ERRORS_CRON="cron(0 20 * * ? *)"

# Number of days to go back for Landsat incomplete reprocessing.
HLS_LANDSAT_DAYS_PRIOR=4

# Maximum retries to reprocess a failed Sentinel granule.
HLS_SENTINEL_RETRY_LIMIT=3

# Maximum retries to reprocess an L30 AC or MGRS tiling failure.
HLS_LANDSAT_RETRY_LIMIT=3

# Max vcpus for Batch compute environment
HLS_MAXV_CPUS=1200

# Replace existing output in S3 buckets.
HLS_REPLACE_EXISTING=true

# ssh keyname for use with Batch instance debugging.
HLS_SSH_KEYNAME=hls-mount

# Sentinel serverless downloader function role arn.
HLS_DOWNLOADER_FUNCTION_ARN=something

# GCC Specific environment settings.
GCC=false
HLS_GCC_ACCOUNT=account_id
AWS_DEFAULT_REGION=region_for_account
HLS_GCC_VPCID=vpcid
HLS_GCC_BOUNDARY_ARN=boudary_policy_arn
# Use Cloudwatch metrics for containers
# HLS_USE_CLOUD_WATCH=true

# end of allexport mode
set +a

# Set environment variables for all outputs set up in cloud formation
stack_info=$(aws cloudformation describe-stacks --stack-name ${HLS_STACKNAME} --output json)
if [[ "$stack_info" =~ "OutputKey" ]]; then
    l=$(echo "$stack_info" | jq ".Stacks[].Outputs | length")
    for ((i=0;i<$l;++i)); do
        key=$(echo "$stack_info" | jq ".Stacks[].Outputs[$i].OutputKey" | sed -e 's/^"//'  -e 's/"$//')
        keyupper=$(echo "$key" | awk '{print toupper($0)}')
        val=$(echo "$stack_info" | jq ".Stacks[].Outputs[$i].OutputValue" | sed -e 's/^"//'  -e 's/"$//')
        export "HLSSTACK_$keyupper"="$val"
    done
fi
